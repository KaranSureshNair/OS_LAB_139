#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
} Process;

void sort_by_arrival(Process queue[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (queue[j].arrival_time > queue[j + 1].arrival_time) {
                Process temp = queue[j];
                queue[j] = queue[j + 1];
                queue[j + 1] = temp;
            }
        }
    }
}

void fcfs_scheduling(Process queue[], int n) {
    int wait_time = 0, turnaround_time = 0, completion_time = 0;
    printf("\nProcess Execution Order:\n");
    for (int i = 0; i < n; i++) {
        if (completion_time < queue[i].arrival_time) {
            completion_time = queue[i].arrival_time; // Ensure CPU starts at correct time
        }
        wait_time = completion_time - queue[i].arrival_time;
        completion_time += queue[i].burst_time;
        turnaround_time = completion_time - queue[i].arrival_time;
        printf("Process %d | Arrival Time: %d | Burst Time: %d | Waiting Time: %d | Turnaround Time: %d\n",
                queue[i].pid, queue[i].arrival_time, queue[i].burst_time, wait_time, turnaround_time);
    }
}

int main() {
    Process system_queue[MAX_PROCESSES], user_queue[MAX_PROCESSES];
    int system_count = 0, user_count = 0, total_processes;

    printf("Enter the number of processes: ");
    scanf("%d", &total_processes);

    for (int i = 0; i < total_processes; i++) {
        int type;
        Process p;
        printf("Enter Process ID, Arrival Time, Burst Time, and Type (0 for System, 1 for User): ");
        scanf("%d %d %d %d", &p.pid, &p.arrival_time, &p.burst_time, &type);
        if (type == 0)
            system_queue[system_count++] = p;
        else
            user_queue[user_count++] = p;
    }

    sort_by_arrival(system_queue, system_count);
    sort_by_arrival(user_queue, user_count);

    printf("\nExecuting System Processes (Higher Priority - FCFS)\n");
    fcfs_scheduling(system_queue, system_count);

    printf("\nExecuting User Processes (Lower Priority - FCFS)\n");
    fcfs_scheduling(user_queue, user_count);

    return 0;
}
